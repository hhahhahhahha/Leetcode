class Solution {
public:
    unordered_map<int,int> index;
    TreeNode* suanfa(const vector<int>& perorder,const vector<int>& inorder,int perorderleft,int perorderright,int inorderleft,int inorderright){
         if (perorderleft > perorderright) {
            return nullptr;
        }
       TreeNode* root=new TreeNode(perorder[perorderleft]);
       int size_left_subtree = index[perorder[perorderleft]] - inorderleft;
       root->left=suanfa(perorder,inorder,perorderleft+1,perorderleft+size_left_subtree,inorderleft,index[perorder[perorderleft]]-1);
       root->right=suanfa(perorder,inorder, perorderleft + size_left_subtree + 1, perorderright,index[perorder[perorderleft]]+1,inorderright);
       return root;
       
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int n=preorder.size();
        for(int i=0;i<n;i++){
            index[inorder[i]]=i;
        }
        TreeNode* ans=suanfa(preorder,inorder,0,n-1,0,n-1);
        return ans;
    }
};